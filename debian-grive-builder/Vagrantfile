# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "debian/testing64"

  # Give a proper hostname to the box
  config.vm.hostname = "grive-builder"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.89"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # Change the network cards to VirtIO for better performance:
    # Two network cards since I also have a host-only network.
    vb.customize ["modifyvm", :id, '--nictype1', 'virtio']
    vb.customize ["modifyvm", :id, '--nictype2', 'virtio']

    # Enable USB 2.0 controllers on the VM
    vb.customize ['modifyvm', :id, '--usbehci', 'on']

    # Enable sound on the guest
    # vb.customize ["modifyvm", :id, '--audio', 'pulse', '--audiocontroller', 'ac97']

    # Customize the amount of memory on the VM:
    vb.memory = "512"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
    # Update repositiories before installing anything.
    apt-get update

    # Update system to latest packages.
    DEBIAN_FRONTEND=noninteractive apt-get --yes dist-upgrade

    # Then install the packages that we need to work with.
    DEBIAN_FRONTEND=noninteractive apt-get install --yes vim screen ncftp mc build-essential linux-headers-amd64
    
    # Install the packages required for Grive development
    DEBIAN_FRONTEND=noninteractive apt-get install --yes git cmake build-essential libgcrypt11-dev libyajl-dev libboost-all-dev libcurl4-openssl-dev libexpat1-dev libcppunit-dev binutils-dev debhelper pkg-config zlib1g-dev

    # Downloading and installing things have ended, clean the downloaded packages.
    apt-get clean

    # After gettings the dependencies, get the latest source package to the correct place.
    sudo --user=vagrant sh -c 'mkdir /home/vagrant/development/ && cd /home/vagrant/development && git clone https://github.com/Grive/grive.git'
   SHELL

  config.vm.post_up_message = "Your grive builder is ready. You can Vagrant ssh to it & it also has an internal IP of 192.168.56.89. Grive source code should be available under \"/home/vagrant/development/grive\". You can simply create the debian package by changing to that directory and running \"dpkg-buildpackage -j4\", then transfer the .deb package and install on Debian stable and/or testing. Enjoy! "
end
